
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOL BOOL_OP COLON EQUALS IDENTIFIER INT INT_OP LET LPAREN NOT PRINT RPAREN SEMICOLON TYPEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : let_statement\n                 | print_statementlet_statement : LET IDENTIFIER COLON TYPE EQUALS expression SEMICOLONprint_statement : PRINT LPAREN expression RPAREN SEMICOLONexpression : expression INT_OP expression\n                  | expression BOOL_OP expressionexpression : NOT expressionexpression : LPAREN expression RPARENexpression : IDENTIFIERexpression : INTexpression : BOOL'
    
_lr_action_items = {'LET':([0,2,3,4,5,8,26,30,],[6,6,-3,-4,-5,-2,-7,-6,]),'PRINT':([0,2,3,4,5,8,26,30,],[7,7,-3,-4,-5,-2,-7,-6,]),'$end':([1,2,3,4,5,8,26,30,],[0,-1,-3,-4,-5,-2,-7,-6,]),'IDENTIFIER':([6,10,12,14,21,22,24,],[9,15,15,15,15,15,15,]),'LPAREN':([7,10,12,14,21,22,24,],[10,12,12,12,12,12,12,]),'COLON':([9,],[11,]),'NOT':([10,12,14,21,22,24,],[14,14,14,14,14,14,]),'INT':([10,12,14,21,22,24,],[16,16,16,16,16,16,]),'BOOL':([10,12,14,21,22,24,],[17,17,17,17,17,17,]),'TYPE':([11,],[18,]),'RPAREN':([13,15,16,17,19,23,25,27,28,],[20,-12,-13,-14,25,-10,-11,-8,-9,]),'INT_OP':([13,15,16,17,19,23,25,27,28,29,],[21,-12,-13,-14,21,21,-11,21,21,21,]),'BOOL_OP':([13,15,16,17,19,23,25,27,28,29,],[22,-12,-13,-14,22,22,-11,22,22,22,]),'SEMICOLON':([15,16,17,20,23,25,27,28,29,],[-12,-13,-14,26,-10,-11,-8,-9,30,]),'EQUALS':([18,],[24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,8,]),'let_statement':([0,2,],[4,4,]),'print_statement':([0,2,],[5,5,]),'expression':([10,12,14,21,22,24,],[13,19,23,27,28,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',5),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',9),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',10),
  ('statement -> let_statement','statement',1,'p_statement','parser.py',17),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',18),
  ('let_statement -> LET IDENTIFIER COLON TYPE EQUALS expression SEMICOLON','let_statement',7,'p_let_statement','parser.py',22),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',26),
  ('expression -> expression INT_OP expression','expression',3,'p_expression_binop','parser.py',30),
  ('expression -> expression BOOL_OP expression','expression',3,'p_expression_binop','parser.py',31),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',35),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',39),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',43),
  ('expression -> INT','expression',1,'p_expression_int','parser.py',47),
  ('expression -> BOOL','expression',1,'p_expression_bool','parser.py',51),
]
